/* Find the longest palindromic subsequence
    Input:
        3
        bbabcbcab
        abbaab
        aaaaa
    Output:
        7   // the result is "babcbab"
        4   // the result is "abba"
        5
    Method:
        Using Dynamic Programing
            + F[i][i] = 1;
            + if str[i] != str[j], then F[i][j] = max(F[i + 1][j], F[i][j - 1])
            + else if j = i + 1, then F[i][j] = 2;
            + else F[i][j] = F[i + 1][j - 1] + 2
*/
#include <iostream>
#include <fstream>
#include <string.h>

using namespace std;

#define MAX_N = 501

int max(int a, int b) { return (a > b) ? a : b; }

int getLongestPalindromicSubsequence(string str) {
    int ret = 1;
    int len = str.length();
    int F[len + 1][len + 1];

    for (int i = 0; i < len; i++)
        F[i][i] = 1;

    for (int l = 2; l <= len; l++) {
        for (int i = 0; i < len - l + 1; i++) {
            int j = i + l - 1;
            if (str[i] != str[j]) {
                F[i][j] = max(F[i + 1][j], F[i][j - 1]);
            }
            else if (l == 2) {
                F[i][j] = 2;
            }
            else {
                F[i][j] = F[i + 1][j - 1] + 2;
            }
        }
    }
    ret = F[0][len - 1];

    return ret;
}

int main()
{
    int tc;
    string str;

    freopen("input.txt", "r", stdin);

    cin >> tc;
    while (tc > 0) {
        cin >> str;
        //cout << str.length() << " " << str << endl;
        cout << getLongestPalindromicSubsequence(str) << endl;
        tc--;
    }

    fclose(stdin);

    return 0;
}

