/* Find the longest palindromic subsequence
    Input:
        3
        bbabcbcab
        abbaab
        aaaaa
    Output:
        7   // the result is "babcbab"
        4   // the result is "abba"
        5
    Method:
        Using LCS (Longest Common Subsequence) as a subroutine to solve this problem
        + Reverse the given sequence
        + LCS of the given sequence and the reversed sequence will be the longest palindromic subsequence
*/
#include <iostream>
#include <fstream>
#include <string.h>

using namespace std;

#define MAX_N = 501

int max(int a, int b) { return (a > b) ? a : b; }

void swap(char *a, char *b) {
    char temp = *a;
    *a = *b;
    *b = temp;
}

string reverseStr(string str) {
    int len = str.length();
    string rev = str;
    for (int i = 0; i < len / 2; i++)
        swap(rev[i], rev[len - i - 1]);

    return rev;
}

string ToStr(char c) {
    return string(1, c);
}

int lcs(string str, string rev) {
    int n = str.length();
    int m = rev.length();
    int F[n + 1][m + 1];

    for (int i = 0; i <= n; i++)
    {
        for (int j = 0; j <= m; j++) {
            if (i == 0 || j == 0)
                F[i][j] = 0;
            else if (str[i - 1] == rev[j - 1])
                F[i][j] = F[i - 1][j - 1] + 1;
            else
                F[i][j] = max(F[i - 1][j], F[i][j - 1]);
        }
    }

    /* print LCS */
    string ret = "";
    int i = n, j = m;
    while (i > 0 && j > 0) {
        if (str[i - 1] == rev[j - 1]) {
            ret.insert(0, ToStr(str[i - 1]));
            i--;
            j--;
        }
        else if (F[i - 1][j] > F[i][j - 1])
            i--;
        else
            j--;
    }
    cout << "The longest palindromic subsequence is: " << ret << " ";

    return F[n][m];
}

int getLongestPalindromicSubsequence(string str) {
    string rev = reverseStr(str);
    //cout << str << " " << rev << endl;

    return lcs(str, rev);
}

int main()
{
    int tc;
    string str;

    freopen("input.txt", "r", stdin);

    cin >> tc;
    while (tc > 0) {
        cin >> str;
        //cout << str.length() << " " << str << endl;
        cout << getLongestPalindromicSubsequence(str) << endl;
        tc--;
    }

    fclose(stdin);

    return 0;
}

