map vs unordered_map in C++

Major difference is, map is implemented internally as balance search tree while unordered_map by hashing. 
That is why average case complexity for add, search and remove in case of map is O(lg n) and in case of unordered_map it is O(1), but in worst case unordered_map's complexity can reach to O(N) (if hash function is bad)
Difference:
                | map                 | unordered_map
---------------------------------------------------------
Ordering        | increasing  order   | no ordering
                | (by default)        |

Implementation  | Self balancing BST  | Hash Table
                | like Red-Black Tree |  

search time     | log(n)              | O(1) -> Average 
                |                     | O(n) -> Worst Case

Insertion time  | log(n) + Rebalance  | Same as search
                      
Deletion time   | log(n) + Rebalance  | Same as search

Use case:
Use std::map when: You need ordered data; You would have to print/access the data (in sorted order).
Use std::unordered_map when: You need to keep count of some data (Example â€“ strings) and no ordering is required; You need single element access i.e. no traversal.


Multimap is similar to map with an addition that multiple elements can have same keys. Rather than each element being unique, the key value and mapped value pair has to be unique in this case.
    Input :     (10, "tung"), (10, "bill"), (15, "mark"), (10, "elon"), (10, "tung")
    Output :    (10, "tung"), (10, "bill"), (10, "elon"), (10, "tung"), (15, "mark")



Reference:
http://www.geeksforgeeks.org/map-vs-unordered_map-c/
http://www.cplusplus.com/reference/map/
